import { keyType, fetcherFn, ConfigInterface, responseInterface } from './types';
declare type KeyLoader<Data = any> = (index: number, previousPageData: Data | null) => keyType;
declare type ExtendedConfigInterface<Data = any, Error = any> = ConfigInterface<Data[], Error, fetcherFn<Data[]>> & {
    initialSize?: number;
    revalidateAll?: boolean;
    persistSize?: boolean;
};
declare type ExtendedResponseInterface<Data = any, Error = any> = responseInterface<Data[], Error> & {
    size?: number;
    setSize?: (size: number | ((size: number) => number)) => Promise<Data[] | undefined>;
};
declare function useSWRInfinite<Data = any, Error = any>(getKey: KeyLoader<Data>): ExtendedResponseInterface<Data, Error>;
declare function useSWRInfinite<Data = any, Error = any>(getKey: KeyLoader<Data>, config?: ExtendedConfigInterface<Data, Error>): ExtendedResponseInterface<Data, Error>;
declare function useSWRInfinite<Data = any, Error = any>(getKey: KeyLoader<Data>, fn?: fetcherFn<Data>, config?: ExtendedConfigInterface<Data, Error>): ExtendedResponseInterface<Data, Error>;
export { useSWRInfinite };
