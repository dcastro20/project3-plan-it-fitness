{"ast":null,"code":"import nextConnect from 'next-connect';\nimport isEmail from 'validator/lib/isEmail';\nimport normalizeEmail from 'validator/lib/normalizeEmail';\nimport bcrypt from 'bcryptjs';\nimport { nanoid } from 'nanoid';\nimport middleware from '../../middlewares/middleware';\nimport { extractUser } from '../../lib/api-helpers';\nconst handler = nextConnect();\nhandler.use(middleware);\nhandler.post(async (req, res) => {\n  const {\n    name,\n    password\n  } = req.body;\n  const email = normalizeEmail(req.body.email);\n\n  if (!isEmail(email)) {\n    res.status(400).send('The email you entered is invalid.');\n    return;\n  }\n\n  if (!password || !name) {\n    res.status(400).send('Missing field(s)');\n    return;\n  }\n\n  if ((await req.db.collection('users').countDocuments({\n    email\n  })) > 0) {\n    res.status(403).send('The email has already been used.');\n    return;\n  }\n\n  const hashedPassword = await bcrypt.hash(password, 10);\n  const user = await req.db.collection('users').insertOne({\n    _id: nanoid(12),\n    email,\n    password: hashedPassword,\n    name,\n    emailVerified: false,\n    bio: '',\n    profilePicture: null\n  }).then(({\n    ops\n  }) => ops[0]);\n  req.logIn(user, err => {\n    if (err) throw err;\n    res.status(201).json({\n      user: extractUser(req)\n    });\n  });\n});\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}