{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport nextConnect from 'next-connect';\nimport multer from 'multer';\nimport { v2 as cloudinary } from 'cloudinary';\nimport middleware from '../../../middlewares/middleware';\nimport { extractUser } from '../../../lib/api-helpers';\nconst upload = multer({\n  dest: '/tmp'\n});\nconst handler = nextConnect();\n/* eslint-disable camelcase */\n\nconst {\n  hostname: cloud_name,\n  username: api_key,\n  password: api_secret\n} = new URL(process.env.CLOUDINARY_URL);\ncloudinary.config({\n  cloud_name,\n  api_key,\n  api_secret\n});\nhandler.use(middleware);\nhandler.get(async (req, res) => res.json({\n  user: extractUser(req)\n}));\nhandler.patch(upload.single('profilePicture'), async (req, res) => {\n  if (!req.user) {\n    req.status(401).end();\n    return;\n  }\n\n  let profilePicture;\n\n  if (req.file) {\n    const image = await cloudinary.uploader.upload(req.file.path, {\n      width: 512,\n      height: 512,\n      crop: 'fill'\n    });\n    profilePicture = image.secure_url;\n  }\n\n  const {\n    name,\n    bio\n  } = req.body;\n  await req.db.collection('users').updateOne({\n    _id: req.user._id\n  }, {\n    $set: _objectSpread(_objectSpread({}, name && {\n      name\n    }), {}, {\n      bio: bio || ''\n    }, profilePicture && {\n      profilePicture\n    })\n  });\n  res.json({\n    user: {\n      name,\n      bio\n    }\n  });\n});\nexport const config = {\n  api: {\n    bodyParser: false\n  }\n};\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}