{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useSWRInfinite } from 'swr';\nimport Link from 'next/link';\nimport { useUser } from '../../lib/hooks';\nimport fetcher from '../../lib/fetch';\n\nfunction Post({\n  post\n}) {\n  const user = useUser(post.creatorId);\n  return __jsx(React.Fragment, null, __jsx(_JSXStyle, {\n    id: \"3967826663\"\n  }, [\"div.jsx-3967826663{box-shadow:0 5px 10px rgba(0,0,0,0.12);padding:1.5rem;margin-bottom:0.5rem;-webkit-transition:box-shadow 0.2s ease 0s;transition:box-shadow 0.2s ease 0s;}\", \"div.jsx-3967826663:hover{box-shadow:0 8px 30px rgba(0,0,0,0.12);}\", \"small.jsx-3967826663{color:#777;}\"]), __jsx(\"div\", {\n    className: \"jsx-3967826663\"\n  }, user && __jsx(Link, {\n    href: \"/user/[userId]\",\n    as: `/user/${user._id}`\n  }, __jsx(\"a\", {\n    style: {\n      display: 'inline-flex',\n      alignItems: 'center'\n    },\n    className: \"jsx-3967826663\"\n  }, __jsx(\"img\", {\n    width: \"27\",\n    height: \"27\",\n    style: {\n      borderRadius: '50%',\n      objectFit: 'cover',\n      marginRight: '0.3rem'\n    },\n    src: user.profilePicture,\n    alt: user.name,\n    className: \"jsx-3967826663\"\n  }), __jsx(\"b\", {\n    className: \"jsx-3967826663\"\n  }, user.name))), __jsx(\"p\", {\n    className: \"jsx-3967826663\"\n  }, post.content), __jsx(\"small\", {\n    className: \"jsx-3967826663\"\n  }, new Date(post.createdAt).toLocaleString())));\n}\n\nconst PAGE_SIZE = 10;\nexport function usePostPages({\n  creatorId\n} = {}) {\n  return useSWRInfinite((index, previousPageData) => {\n    // reached the end\n    if (previousPageData && previousPageData.posts.length === 0) return null; // first page, previousPageData is null\n\n    if (index === 0) {\n      return `/api/posts?limit=${PAGE_SIZE}${creatorId ? `&by=${creatorId}` : ''}`;\n    } // using oldest posts createdAt date as cursor\n    // We want to fetch posts which has a datethat is\n    // before (hence the .getTime() - 1) the last post's createdAt\n\n\n    const from = new Date(new Date(previousPageData.posts[previousPageData.posts.length - 1].createdAt).getTime() - 1).toJSON();\n    return `/api/posts?from=${from}&limit=${PAGE_SIZE}${creatorId ? `&by=${creatorId}` : ''}`;\n  }, fetcher, {\n    refreshInterval: 10000 // Refresh every 10 seconds\n\n  });\n}\nexport default function Posts({\n  creatorId\n}) {\n  var _data$0$posts, _data;\n\n  const {\n    data,\n    error,\n    size,\n    setSize\n  } = usePostPages({\n    creatorId\n  });\n  const posts = data ? data.reduce((acc, val) => [...acc, ...val.posts], []) : [];\n  const isLoadingInitialData = !data && !error;\n  const isLoadingMore = isLoadingInitialData || data && typeof data[size - 1] === 'undefined';\n  const isEmpty = (data === null || data === void 0 ? void 0 : (_data$0$posts = data[0].posts) === null || _data$0$posts === void 0 ? void 0 : _data$0$posts.length) === 0;\n  const isReachingEnd = isEmpty || data && ((_data = data[data.length - 1]) === null || _data === void 0 ? void 0 : _data.posts.length) < PAGE_SIZE;\n  return __jsx(\"div\", null, posts.map(post => __jsx(Post, {\n    key: post._id,\n    post: post\n  })), !isReachingEnd && __jsx(\"button\", {\n    type: \"button\",\n    style: {\n      background: 'transparent',\n      color: '#000'\n    },\n    onClick: () => setSize(size + 1),\n    disabled: isReachingEnd || isLoadingMore\n  }, isLoadingMore ? '. . .' : 'load more'));\n}","map":null,"metadata":{},"sourceType":"module"}