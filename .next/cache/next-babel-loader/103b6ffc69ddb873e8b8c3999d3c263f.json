{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Head from 'next/head';\nimport { useCurrentUser } from '../lib/hooks';\n\nconst ProfileSection = () => {\n  const [user, {\n    mutate\n  }] = useCurrentUser();\n  const {\n    0: isUpdating,\n    1: setIsUpdating\n  } = useState(false);\n  const nameRef = useRef();\n  const bioRef = useRef();\n  const profilePictureRef = useRef();\n  const {\n    0: msg,\n    1: setMsg\n  } = useState({\n    message: '',\n    isError: false\n  });\n  useEffect(() => {\n    nameRef.current.value = user.name;\n    bioRef.current.value = user.bio;\n  }, [user]);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (isUpdating) return;\n    setIsUpdating(true);\n    const formData = new FormData();\n\n    if (profilePictureRef.current.files[0]) {\n      formData.append('profilePicture', profilePictureRef.current.files[0]);\n    }\n\n    formData.append('name', nameRef.current.value);\n    formData.append('bio', bioRef.current.value);\n    const res = await fetch('/api/user', {\n      method: 'PATCH',\n      body: formData\n    });\n\n    if (res.status === 200) {\n      const userData = await res.json();\n      mutate({\n        user: _objectSpread(_objectSpread({}, user), userData.user)\n      });\n      setMsg({\n        message: 'Profile updated'\n      });\n    } else {\n      setMsg({\n        message: await res.text(),\n        isError: true\n      });\n    }\n  };\n\n  const handleSubmitPasswordChange = async e => {\n    e.preventDefault();\n    const body = {\n      oldPassword: e.currentTarget.oldPassword.value,\n      newPassword: e.currentTarget.newPassword.value\n    };\n    e.currentTarget.oldPassword.value = '';\n    e.currentTarget.newPassword.value = '';\n    const res = await fetch('/api/user/password', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n\n    if (res.status === 200) {\n      setMsg({\n        message: 'Password updated'\n      });\n    } else {\n      setMsg({\n        message: await res.text(),\n        isError: true\n      });\n    }\n  };\n\n  async function sendVerificationEmail() {\n    await fetch('/api/user/email/verify', {\n      method: 'POST'\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, \"Settings\")), __jsx(\"section\", null, __jsx(\"h2\", null, \"Edit Profile\"), msg.message ? __jsx(\"p\", {\n    style: {\n      color: msg.isError ? 'red' : '#0070f3',\n      textAlign: 'center'\n    }\n  }, msg.message) : null, __jsx(\"form\", {\n    onSubmit: handleSubmit\n  }, !user.emailVerified ? __jsx(\"p\", null, \"Your email has not been verify.\", ' ', __jsx(\"a\", {\n    role: \"button\",\n    onClick: sendVerificationEmail\n  }, \"Send verification email\")) : null, __jsx(\"label\", {\n    htmlFor: \"name\"\n  }, \"Name\", __jsx(\"input\", {\n    required: true,\n    id: \"name\",\n    name: \"name\",\n    type: \"text\",\n    placeholder: \"Your name\",\n    ref: nameRef\n  })), __jsx(\"label\", {\n    htmlFor: \"bio\"\n  }, \"Bio\", __jsx(\"textarea\", {\n    id: \"bio\",\n    name: \"bio\",\n    type: \"text\",\n    placeholder: \"Bio\",\n    ref: bioRef\n  })), __jsx(\"label\", {\n    htmlFor: \"avatar\"\n  }, \"Profile picture\", __jsx(\"input\", {\n    type: \"file\",\n    id: \"avatar\",\n    name: \"avatar\",\n    accept: \"image/png, image/jpeg\",\n    ref: profilePictureRef\n  })), __jsx(\"button\", {\n    disabled: isUpdating,\n    type: \"submit\"\n  }, \"Save\")), __jsx(\"form\", {\n    onSubmit: handleSubmitPasswordChange\n  }, __jsx(\"label\", {\n    htmlFor: \"oldpassword\"\n  }, \"Old Password\", __jsx(\"input\", {\n    type: \"password\",\n    name: \"oldPassword\",\n    id: \"oldpassword\",\n    required: true\n  })), __jsx(\"label\", {\n    htmlFor: \"newpassword\"\n  }, \"New Password\", __jsx(\"input\", {\n    type: \"password\",\n    name: \"newPassword\",\n    id: \"newpassword\",\n    required: true\n  })), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Change Password\"))));\n};\n\nconst SettingPage = () => {\n  const [user] = useCurrentUser();\n\n  if (!user) {\n    return __jsx(React.Fragment, null, __jsx(\"p\", null, \"Please sign in\"));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(\"h1\", null, \"Settings\"), __jsx(ProfileSection, null));\n};\n\nexport default SettingPage;","map":null,"metadata":{},"sourceType":"module"}