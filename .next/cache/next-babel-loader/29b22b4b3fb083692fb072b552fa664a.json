{"ast":null,"code":"import sgMail from '@sendgrid/mail';\nimport crypto from 'crypto';\nimport bcrypt from 'bcryptjs';\nimport nextConnect from 'next-connect';\nimport database from '../../../../middlewares/database';\nsgMail.setApiKey(process.env.SENDGRID_API_KEY);\nconst handler = nextConnect();\nhandler.use(database);\nhandler.post(async (req, res) => {\n  const user = await req.db.collection('users').findOne({\n    email: req.body.email\n  });\n\n  if (!user) {\n    res.status(401).send('The email is not found');\n    return;\n  }\n\n  const token = crypto.randomBytes(32).toString('hex');\n  await req.db.collection('tokens').insertOne({\n    token,\n    userId: user._id,\n    type: 'passwordReset',\n    expireAt: new Date(Date.now() + 1000 * 60 * 20)\n  });\n  const msg = {\n    to: user.email,\n    from: process.env.EMAIL_FROM,\n    subject: '[nextjs-mongodb-app] Reset your password.',\n    html: `\n      <div>\n        <p>Hello, ${user.name}</p>\n        <p>Please follow <a href=\"${process.env.WEB_URI}/forget-password/${token}\">this link</a> to reset your password.</p>\n      </div>\n      `\n  };\n  await sgMail.send(msg);\n  res.end('ok');\n});\nhandler.put(async (req, res) => {\n  // password reset\n  if (!req.body.password) {\n    res.status(400).send('Password not provided');\n    return;\n  }\n\n  const {\n    value: tokenDoc\n  } = await req.db.collection('tokens').findOneAndDelete({\n    token: req.body.token,\n    type: 'passwordReset'\n  });\n\n  if (!tokenDoc) {\n    res.status(403).send('This link may have been expired.');\n    return;\n  }\n\n  const password = await bcrypt.hash(req.body.password, 10);\n  await req.db.collection('users').updateOne({\n    _id: tokenDoc.userId\n  }, {\n    $set: {\n      password\n    }\n  });\n  res.end('ok');\n});\nexport default handler;","map":null,"metadata":{},"sourceType":"module"}